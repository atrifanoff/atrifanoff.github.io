{"version":3,"sources":["rvin_white_logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","emailValue","setEmailValue","className","href","src","rvinLogo","alt","icon","faSpotify","faSoundcloud","faInstagram","faTwitter","faFacebook","Typography","action","method","noValidate","type","name","value","htmlFor","id","onChange","event","target","autoCapitalize","autoCorrect","title","width","height","frameborder","allowtransparency","allow","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","typography","useNextVariants","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,6C,uNCwF5BC,MA3Ef,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,KAIb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,uBACEC,KAAK,IACLD,UAAU,qBACV,yBAAKE,IAAKC,IAAUH,UAAU,WAAWI,IAAI,UAG/C,yBAAKJ,UAAU,oBACb,uBACEC,KAAK,mFACLD,UAAU,qBACV,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,uBACEL,KAAK,uCACLD,UAAU,qBACV,kBAAC,IAAD,CAAiBK,KAAME,OAEzB,uBACEN,KAAK,sCACLD,UAAU,qBACV,kBAAC,IAAD,CAAiBK,KAAMG,OAEzB,uBACEP,KAAK,oCACLD,UAAU,qBACV,kBAAC,IAAD,CAAiBK,KAAMI,OAEzB,uBACER,KAAK,sCACLD,UAAU,qBACV,kBAAC,IAAD,CAAiBK,KAAMK,QAI3B,kBAACC,EAAA,EAAD,CAAYX,UAAU,qBAAtB,iCAEA,yBAAKA,UAAU,0BACb,0BAAMY,OA1CM,sGA0CeC,OAAO,OAAOC,YAAU,GACjD,2BAAOC,KAAK,SAASC,KAAK,IAAIC,MAAM,8BACpC,2BAAOF,KAAK,SAASC,KAAK,KAAKC,MAAM,eACrC,2BAAOC,QAAQ,UACb,2BACEH,KAAK,QACLC,KAAK,QACLG,GAAG,SACHF,MAAOnB,EACPsB,SAAU,SAACC,GAAYtB,EAAcsB,EAAMC,OAAOL,QAClDM,eAAe,MACfC,YAAY,SAGhB,2BAAOT,KAAK,SAASE,MAAM,YAAYD,KAAK,YAAYG,GAAG,wBAAwBnB,UAAU,oBAIjG,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,qBACb,4BAAQyB,MAAM,eAAevB,IAAI,+DAA+DwB,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAIC,kBAAkB,OAAOC,MAAM,sBAI5K,kBAACnB,EAAA,EAAD,CAAYX,UAAU,gBAAtB,2CCrEY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCXAC,EAAQC,YAAe,CACzBC,QAAS,CACNC,QAAS,CACNC,KAAM,QAETC,UAAW,CACTD,KAAM,YAGXE,WAAY,CACTC,iBAAiB,KAIxBC,IAASC,OACL,kBAAC,IAAD,CAAkBT,MAAOA,GACrB,kBAAC,EAAD,OAEJU,SAASC,eAAe,SD0GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2c499e76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rvin_white_logo.608425a4.png\";","import React, { useState } from 'react';\nimport rvinLogo from './rvin_white_logo.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSpotify,\n  faSoundcloud,\n  faInstagram,\n  faTwitter,\n  faFacebook\n} from '@fortawesome/free-brands-svg-icons'\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\n\nfunction App() {\n  const [emailValue, setEmailValue] = useState('');\n  const mailingList = 'https://rvinmusic.us14.list-manage.com/subscribe/post?u=2eff7961b42f346569dfb0c8e&amp;id=38eab53097'\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <a\n          href=\"/\"\n          className=\"white-icon social\">\n          <img src={rvinLogo} className=\"App-logo\" alt=\"logo\" />\n        </a>\n\n        <div className=\"social-container\">\n          <a\n            href=\"https://open.spotify.com/artist/5YWBI1QMlfHykuAidqMyGH?si=cuih3CoTRuOkTQx3PkUEEg\"\n            className=\"white-icon social\">\n            <FontAwesomeIcon icon={faSpotify} />\n          </a>\n          <a\n            href=\"https://www.soundcloud.com/RVINmusic\"\n            className=\"white-icon social\">\n            <FontAwesomeIcon icon={faSoundcloud} />\n          </a>\n          <a\n            href=\"https://www.instagram.com/RVINmusic\"\n            className=\"white-icon social\">\n            <FontAwesomeIcon icon={faInstagram} />\n          </a>\n          <a\n            href=\"https://www.twitter.com/RVINmusic\"\n            className=\"white-icon social\">\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n          <a\n            href=\"https://www.facebook.com/RVINmusic/\"\n            className=\"white-icon social\">\n            <FontAwesomeIcon icon={faFacebook} />\n          </a>\n        </div>\n\n        <Typography className=\"mailing-list-text\">JOIN MAILING LIST FOR UPDATES</Typography>\n\n        <div className=\"mailing-list-container\">\n          <form action={mailingList} method=\"POST\" noValidate>\n            <input type=\"hidden\" name=\"u\" value=\"eb05e4f830c2a04be30171b01\" />\n            <input type=\"hidden\" name=\"id\" value=\"8281a64779\" />\n            <label htmlFor='MERGE0'>\n              <input\n                type=\"email\"\n                name=\"EMAIL\"\n                id=\"MERGE0\"\n                value={emailValue}\n                onChange={(event) => { setEmailValue(event.target.value); }}\n                autoCapitalize=\"off\"\n                autoCorrect=\"off\"\n              />\n            </label>\n            <input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" className=\"subscribe-btn\" />\n          </form>\n        </div>\n\n        <div className=\"music-container\">\n          <div className=\"spotify-container\">\n            <iframe title=\"spotifyFrame\" src=\"https://open.spotify.com/embed/artist/5YWBI1QMlfHykuAidqMyGH\" width=\"300\" height=\"300\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n          </div>\n        </div>\n\n        <Typography className=\"contact-text\">Contact/inquires: info@RVINmusic.com</Typography>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n       primary: {\n          main: '#fff'\n       },\n       secondary: {\n         main: '#607d8b'\n       },\n    },\n    typography: { \n       useNextVariants: true\n    }\n });\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}